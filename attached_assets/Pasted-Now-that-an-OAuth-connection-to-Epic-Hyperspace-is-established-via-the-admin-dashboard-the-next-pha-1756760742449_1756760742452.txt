Now that an OAuth connection to Epic Hyperspace is established via the admin dashboard, the next phase is to synchronize relevant patient data from the EMR using Epic’s FHIR API. Epic’s recommended approach is to retrieve data in sequence: Patient → Conditions → Observations → Documents → Encounters. This ensures we gather all necessary information for the screening engine while following the “minimum necessary” principle. Below, we outline the key data categories to sync and how to proceed with each, along with important OAuth scope and token considerations.
Retrieve Patient Demographics and Conditions
Patient Data: The patient’s demographic information (age, date of birth, sex, etc.) and medical identifiers (e.g. MRN) should be fetched first. This provides the basic context needed for screening eligibility rules. Using the FHIR Patient resource (via the Epic FHIR API), you can search by the patient’s MRN or ID to retrieve their Patient record. Make sure to capture fields like birthDate and gender.
Preexisting Conditions: Next, query the patient’s conditions (problem list) from the EMR. Chronic conditions or medical history (e.g. diabetes, hypertension) can act as trigger conditions that influence screening recommendations. Use the FHIR Condition endpoint with the patient’s ID to get active and past conditions. This data will help determine which screenings apply – for example, a history of smoking might trigger lung cancer screening criteria. By combining demographics and conditions, the screening engine can filter out inapplicable screenings (e.g. based on age or gender) and flag those that are relevant due to existing conditions.
* Example: If a screening type is only for females over 50, the patient’s age and sex from the Patient record will confirm eligibility. If a screening requires a trigger condition (like a colonoscopy for patients with a history of polyps), the Condition list will reveal if the patient meets that criterion.
Retrieve Encounter (Appointment) Data
Last Visit / Appointment: It’s important to know when the patient was last seen in-office. This can be obtained from the EMR’s Encounter records (or Appointments, depending on Epic’s data structure). Query the FHIR Encounter resource for the patient to get recent visit dates. Typically, you can request encounters sorted by date, and then identify the most recent one (the last completed encounter). This “last seen” date will be used as a reference point for data retrieval cutoffs.
* Usage: The last encounter date helps define how far back to pull clinical data. For example, you might decide to only retrieve documents or results since the patient’s last visit (or within a certain time frame, e.g. the past 2–5 years) to keep the data relevant and manageable. If a patient hasn’t been seen in a long time, that might broaden the search window or indicate that all screenings could be due. Conversely, a very recent visit might mean some data (like labs or notes from that visit) are already up to date.
* Future Encounters: While the primary goal is the last seen date, you may also fetch upcoming appointments if needed. Knowing a patient has an upcoming visit can be useful for planning (e.g. preparing a “prep sheet”), though the main focus here is on past encounters for cutoff determination.
Retrieve Clinical Notes and Documents
Clinical Documents: The EMR contains clinical notes, reports, and scanned files that are critical for determining if a screening has been done. Use the FHIR DocumentReference resource to retrieve references to such documents for the patient. This will return a list of documents (e.g. consultation notes, procedure reports like colonoscopy results, imaging reports like mammograms or DXA scans, lab reports, etc.) along with metadata like titles and dates. By querying and filtering these documents (e.g. most recent first, limiting to a reasonable number like the latest 50 documents), we gather the pool of records that might contain evidence of completed screenings.
Keyword Matching & OCR: Once you have the document references, the next step is to identify which documents are relevant to each screening type. This is done by comparing document titles and contents to keywords associated with the screenings. For example, for a colon cancer screening, look for keywords like “Colonoscopy” or “FIT test” in the document title or content. Many DocumentReference entries will include a title or type code that can hint at their content. However, some documents (especially scanned PDFs or images of reports) may require fetching the actual content and running OCR (Optical Character Recognition) to extract text.
* Content Retrieval: For documents that appear relevant (or to be thorough, for all documents), download the actual document content via the FHIR API. Epic’s DocumentReference may provide a direct attachment (base64-encoded data) or a URL to a Binary resource that needs a follow-up GET request. The custom FHIR client in HealthPrepV2 already includes a helper to download document binaries. Feed the downloaded PDFs/images into your OCR processor, which will extract text.
* Keyword Search: Parse the text for screening-related keywords (each screening type should have a list of terms to look for, such as “mammogram”, “colonoscopy”, “Pap smear”, etc.). If a keyword is found in a document’s title or OCR-extracted text, mark that document as potentially confirming a completed screening.
* Date and Frequency Check: Compare the document’s date (from the DocumentReference metadata) to the current date and the recommended screening frequency for that screening type. This will tell you if the screening is up-to-date or due. For instance, if mammography is due every 2 years and you find a “Mammogram report” dated 18 months ago, the patient is still within the compliant interval; if the last one was 3 years ago, they are overdue for a new screening. By automating this comparison, the system can determine which screenings are completed (and until when) and which are due next.
* PHI Redaction: Ensure that any content extracted from clinical documents has Protected Health Information (PHI) redacted or handled securely. The OCR process should avoid storing sensitive identifiers. HealthPrepV2’s document parser likely includes a redaction step to remove things like names, MRNs, or other identifiers from the text before or after keyword processing. This way, the screening engine only retains the necessary minimal info (e.g. “colonoscopy done on 2022-08-15”) without exposing full PHI.
By performing the above steps, the application will build a comprehensive picture for each patient: what screenings they are eligible for, which have been done (with dates), and which are due based on time intervals.
OAuth Scope Configuration for FHIR Access
Accessing the data categories above requires that the proper OAuth scopes were granted during the Epic authorization. The app’s OAuth scope must include permissions to read patients, conditions, observations, documents, and encounters from the FHIR API. For example, the scopes should include:
* patient/Patient.read for patient demographics
* patient/Condition.read for problem list
* patient/Observation.read for lab results and observations
* patient/DocumentReference.read for clinical documents
* patient/Encounter.read (and/or patient/Appointment.read if using Appointment) for encounter/visit data
HealthPrepV2’s integration likely uses a scope string that covers both patient-specific and user-level access for these resources (as seen in the default scope configuration)GitHub. If the admin configured the Epic client with the recommended scopes, no change is needed here. Just double-check that the scopes granted match all the data you plan to query. If any scope is missing (for example, if you decide to use the Appointment resource or need access to other FHIR endpoints), update the Epic configuration to include those. The OAuth consent from the user (admin) must also be obtained for any newly added scope.
Scope in Practice: The existing default scope list in the code already covers the needed bases, including both patient/... and user/... variants for reads. The patient/ scopes allow the app to read data for the specific patient(s) the user is authorized for, while user/ scopes could allow a system-level user to read data across patients if permitted. In this context, focusing on patient/*.*.read scopes is typical for a patient-specific data pull after the user logs in via Epic’s OAuth.
Token Expiry and Sync Strategy
Epic’s OAuth access tokens have a limited lifespan (approximately 4 hours, based on Epic’s defaults), so the synchronization process must account for token expiration. There are two approaches to handle this, and HealthPrepV2 can implement a mix of both:
* User-Initiated Sync: The simplest strategy (as suggested) is to perform data sync on-demand when a user triggers it, such as clicking a “Sync with EMR” button. Since the user will have just authenticated or is actively using the app, the access token in their session is likely still valid. This avoids dealing with expired tokens in the background. For example, an admin logs in, connects to Epic, and immediately hits “Sync” – the app uses the existing token (or refresh token if needed) to pull all the data described above. This approach ensures the auth status is fresh and reduces automatic token management complexity.
* Automatic Sync with Token Refresh: In some cases, you may want the system to periodically refresh data (say daily or weekly) without manual intervention. To do this, you must handle token expiration by using the refresh token to obtain new access tokens as needed. HealthPrepV2 has support for refresh logic – for instance, it checks token expiry and can call the refresh token grant if a token is expired before making FHIR calls. If implementing automatic sync (or long-running background jobs), ensure that the code checks the token’s expiry timestamp and invokes a refresh if the token is near expiry or invalid (the Epic FHIR client can detect a 401 Unauthorized response and attempt a refresh as well). The application should also store the updated token (and new expiry) in the database or session after refresh so that subsequent calls use the latest credentials.
Recommendation: Given the token time-limit and complexity of background token management, a user-initiated sync on demand is a prudent approach initially. This means the admin or user explicitly triggers the EMR data fetch when needed (for example, when preparing to run the screening engine or when they know new data is available). This guarantees that a valid token is present (since the user would have authenticated recently). In the background, you can still run a token monitor – for instance, HealthPrepV2 includes a token scheduler that checks if tokens are expiring soon or expired and logs warnings. Such a monitor can alert an admin that they need to re-authenticate the connection if it’s expired. But the actual heavy data pull can be tied to a user action to keep things simple.
Finally, ensure that after any data sync, the application properly stores or caches the retrieved information (according to your data storage design) and feeds it into the screening logic. Patient records might be updated or created in your local database (the code shows syncing and saving Patient and Document records locally), and documents may be saved or at least kept in memory for analysis. Remember to maintain compliance: store only what is necessary (for example, you might store document metadata and analysis results rather than raw PHI content, in line with minimizing PHI storage).
In summary, with OAuth in place, the next steps are to retrieve patients’ data (demographics & conditions), recent encounters, and clinical documents via FHIR, then process those documents for keywords and dates to update the screening status. Configure your OAuth scopes to allow all required data access, and plan your sync trigger strategy with token expiration in mind. Following these steps will integrate the Epic EMR data into HealthPrepV2’s screening engine, ensuring that screening eligibility and due checks are based on the latest available patient information.
