Epic’s FHIR API is secured via OAuth2 using the SMART on FHIR protocol. To connect HealthPrepV2 to Epic’s sandbox, we must set up a SMART on FHIR standalone launch flow. In a standalone launch, the user (likely a clinical user in this case) logs into Epic to authorize the HealthPrepV2 app to access data. The following steps outline how to configure and perform this authentication:
1. Register the Application with Epic: Sign up as a developer on open.epic.com and register a new FHIR client application. During registration, you’ll specify the app type (likely “Provider-facing standalone app”), the OAuth redirect URI, and the FHIR API scopes your app needs. Epic will issue a Client ID (a unique identifier for the app). In the Epic sandbox, apps are typically registered as public (no client secret) unless you choose a confidential app. Make sure to request all relevant scopes such as:
    * patient/Patient.read (or user/Patient.read if using user-level scope) – to read patient demographics.
    * patient/Condition.read, patient/Observation.read, patient/DocumentReference.read – to read the needed resources.
    * patient/DocumentReference.write (specifically the Clinical Notes create scope) – to write back the prep sheet. Epic might list this as a specific named scope (as seen in the Topology example, “DocumentReference.Create (Clinical Notes)”).
    * launch/launch/patient if needed (for EHR launch contexts; not strictly needed in standalone unless the app will receive a specific patient context token – in the sandbox standalone, the user will pick a patient).
    * offline_access if you need refresh tokens for long-term access (so the app can refresh the token after it expires, which is useful if the app needs to run in background jobs).
    * openid and fhirUser if you want the user’s identity (not mandatory for our use, but openid is often required in Epic’s sandbox)fhir.epic.com.
2. The Epic App Dashboard (open.epic.com > MyApps) allows configuring these scopes. Ensure the redirect URL exactly matches your app’s URL that will handle the OAuth callback.
3. Use Epic’s LaunchPad (Sandbox) for Testing: Epic provides a LaunchPad tool on open.epic.com to simulate launching your app in the sandbox contextopen.epic.com. Since this is a standalone launch, you won’t launch from inside an Epic session, but rather you initiate the OAuth flow yourself. The LaunchPad can help by providing a launch URL. In practice, to start the auth flow, your app should direct the user’s browser to Epic’s authorization endpoint, for example:    GET https://fhir.epic.com/interconnect-fhir-oauth/oauth2/authorize?
4.     response_type=code
5.     &client_id=YOUR_CLIENT_ID
6.     &redirect_uri=YOUR_REDIRECT_URI
7.     &scope=openid%20fhirUser%20patient/Patient.read%20...%20patient/DocumentReference.write
8.     &aud=https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR/R4/
9.     &state=XYZ 
10.    (All on one line; line breaks added for readability.) Here, aud is the base FHIR endpoint (Epic may require the audience parameter to ensure the token is for the correct server)fhir.epic.com. The scopes are space-separated. The state is a random string your app generates to correlate the response. The user will be taken to Epic’s login screen. In the Epic sandbox, you can use one of the provided test user accounts (for example, Omar ClinDoc or Anna Cadence – Epic provides credentials for these test users in the sandbox data pageknime.com). After login, Epic will ask the user to authorize your app and then redirect back to your specified redirect_uri with a code (authorization code) and the state.
11. Handle the OAuth Callback and Token Exchange: Your app’s redirect URI endpoint (e.g., /epic_oauth_callback) will receive the authorization code. The app must then exchange this code for an access token by making a server-to-server POST to Epic’s token endpoint. For the Epic sandbox, the token endpoint is: https://fhir.epic.com/interconnect-fhir-oauth/oauth2/token The app will POST form data including:
    * grant_type=authorization_code
    * code=<the authorization code>
    * redirect_uri=<your redirect URI (must match exactly)>
    * client_id=<your Client ID>
    * client_secret=<secret> (if it’s a confidential app; if public, no secret is used)
    * code_verifier=<verifier> (if using PKCE, which is recommended for public apps)
12. If all is well, Epic will return a JSON payload containing an access_token (and possibly a refresh_token if offline_access was requested) along with the token’s scope and expiration. The access_token is typically valid for a short period (e.g., 5-10 minutes or as configured). Your app should securely store the token (e.g. in the user’s session or a secure database table) along with the refresh token (if provided).
13. Authorized API Calls: With the access token in hand, the app can now make the FHIR API calls described in the previous section to read and write data. The token represents the user and has the scopes/permissions granted. In practice, the token is included in the HTTP Authorization header for each API request. For example:    GET [base]/Condition?patient=12345  
14. Authorization: Bearer <access_token>
15.    The Epic sandbox will validate the token and return data. As noted, if the token expires, the app can use the refresh_token with a similar POST to the token endpoint (grant_type=refresh_token&refresh_token=...) to get a new access token without user re-login.
16. Testing in Sandbox: Epic’s LaunchPad interface can automate some of this; it allows you to simulate the SMART launch and will send the code to your app’s redirect. In sandbox, you might use LaunchPad to pick a patient and user, which will then construct the authorize URL (including a sandbox launch context). For example, LaunchPad lets you select a patient like Anna Cadence and will include that context so your app immediately knows which patient is in context. This can simplify testing. Regardless, your app must handle the general case of no pre-selected patient (in a true standalone launch, after login, Epic’s authorization server may provide a patient picker if the scope is patient-level and the user didn’t specify a patient in launch). In the sandbox, selecting a patient in LaunchPad essentially bypasses the need for a separate patient selection step.
After these steps, HealthPrepV2 is authenticated and authorized to access Epic data. The user is logged in via Epic (which satisfies the requirement of using Epic’s credentials for secure onboarding), and the app holds a token to act on the user’s behalf. This flow aligns with standard SMART on FHIR practice, and Epic’s sandbox closely mirrors production OAuth behavior.
