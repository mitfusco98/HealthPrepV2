Querying Epic’s FHIR API for Screening Data
To retrieve data from Epic’s EMR, HealthPrepV2 will query the Epic on FHIR sandbox using RESTful FHIR API calls. All calls are made to Epic’s R4 FHIR base URL (sandbox): https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR/R4/ , with appropriate endpoints and query parameters. Each request must include the OAuth2 bearer access token in the HTTP Authorization header (Authorization: Bearer <token>), as obtained via SMART on FHIR (described later; Below are the key data retrieval operations and examples:
* Patient Demographics: If the patient’s FHIR ID is known (e.g. provided by context after login), the app can fetch the patient record directly:    GET [base]/Patient/{patient_id}
*    This returns the patient’s demographics (name, birthDate, gender, identifiers, etc.). In the sandbox, one can also search by patient name or other identifiers. For example, to find a test patient by name and birthdate:    GET [base]/Patient?family=Lin&given=Derrick&birthdate=1973-06-03
*    This query returns the patient Derrick Lin in the Epic sandbox Epic’s Patient search requires a minimal set of identifiers (e.g. name + DOB, MRN, or SSN) to return a match. In practice, when HealthPrepV2 is launched via SMART, the patient will typically be pre-selected, so direct Patient/{id} reads are common.
* Conditions (Problem List): To retrieve a patient’s active or past conditions (diagnoses), use the Condition resource:    GET [base]/Condition?patient={patient_id}
*    This returns all conditions on the patient’s chart (e.g. problem list entries like Diabetes, Hyperlipidemia). Epic’s Condition search API will return conditions with clinical status, codes, etc., for the given patient HealthPrepV2 uses this to identify trigger conditions that affect screening criteria (for example, checking if “Diabetes” is present to adjust A1C screening frequency). The Epic sandbox’s Condition.Search (R4) API provides all past and current conditions for the patient
* Lab Results and Observations: For quantitative results (lab tests, vital signs), the app can query Observations. For example:    GET [base]/Observation?patient={patient_id}&category=laboratory
*    returns lab Observation resources for the patient (e.g. the latest HbA1c value, lipid panel results) Each Observation will include a test code (LOINC), value, and date. The screening engine can use these to check if results are within the required timeframe (e.g. last A1C date for diabetics). Epic supports querying observations by category or code; using category=laboratory filters to lab results. Alternatively, Epic provides DiagnosticReport (Results) for labs and imaging, which encapsulates the test report (often with human-readable conclusions). For example, a mammography result might be available as a DiagnosticReport (with attached findings) or as a DocumentReference (see below) if it’s an uploaded report. HealthPrepV2 can retrieve whichever format Epic stores the data in (structured Observation vs. report document).
* Clinical Documents (Notes/Reports): To fetch scanned documents, consult notes, or reports, use the DocumentReference resource. A general query is:    GET [base]/DocumentReference?patient={patient_id}
*    This returns document references for that patient – for example, PDFs or text notes such as colonoscopy reports, DXA scan results, or specialist consult lettersopen.epic.com. Each DocumentReference includes metadata (type, date, author) and either the document content (as a Base64-encoded attachment or URL) or a pointer to an image/Binary resource. In Epic’s FHIR implementation, DocumentReference results may be scoped by type; for instance, the DocumentReference (Clinical Notes) API returns notes in the chart (progress notes, consult notes), while DocumentReference (Labs) returns lab report documents. In a simple scenario, querying by patient alone returns a list of documents, which can be filtered by type or category codes (e.g., category=clinical-note for clinical notes vs. category=lab-report). HealthPrepV2 would use the DocumentReference list to find documents whose titles or types match the screening keywords (for example, find any document with “mammogram” or a LOINC code for mammography). Epic’s documentation notes that DocumentReference is a generic resource for many document types (C-CDAs, notes, external records, etc.), so the app may need to filter results to the relevant document categories for screening.
* Encounters (Visits/Appointments): To retrieve encounter information (e.g., upcoming appointment for which to generate a prep sheet, or past encounters relevant to screenings), use:    GET [base]/Encounter?patient={patient_id}
*    This returns a list of the patient’s encounters (clinic visits, hospital admissions, etc.) with dates and types. HealthPrepV2 can identify the upcoming encounter (by looking for an encounter with a future date or a specific appointment ID if known) to focus the prep sheet on that context. Encounter data can also provide context like the department or physician for the appointment. In Epic’s sandbox, Encounter resources are read-only and include basic visit info. If needed, Appointment resources (supported in Epic R) could also be used for future scheduled visits, but often an upcoming appointment is represented as a future Encounter.
Example: After obtaining an access token, a typical sequence to gather data for a given patient might be: fetch the Patient record (or use provided ID), then query Condition?patient=ID (get problem list), Observation?patient=ID for labs, DocumentReference?patient=ID for relevant documents, and perhaps Encounter?patient=ID for upcoming visits. Each of these GET requests will be issued to the Epic FHIR endpoint with the authorization token. The Epic sandbox has a set of test patients with known data (e.g., “Derrick Lin” as above, or others listed on open.epic’s site), which can be used to simulate these queries.
Note: All FHIR queries should be designed to retrieve only the data needed for screening (adhering to the “minimum necessary” principle). For instance, rather than pulling an entire medical record, the app should filter by patient and resource type (and perhaps date range or specific codes) to avoid over-fetching PHI. This is aligned with HealthPrepV2’s design goal of accessing only required data for prep sheet generation.