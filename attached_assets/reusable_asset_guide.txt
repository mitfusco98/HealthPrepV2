Reusable Template Assets (Recommended for V2)

1. templates/screening_list.html
Reason to Reuse:
It dynamically renders multiple modes (list, types, checklist) via tab logic, making it efficient and central to screening workflows.
Clearly built with flexibility in mind.
Recommended Adjustments:
Break into component templates (screening_list.html, screening_types.html, checklist_settings.html) to improve modularity and testability.
Abstract out tab content blocks into {% include %} or {% macro %} style partials.
2. Assets Used by /screening Pages
static/js/screening_modals.js
static/js/screening_performance.js
Reason to Reuse:
These scripts are specific to modals and list updates and appear tightly integrated with dynamic screening interactions.
Suggested Refactoring:
Move modals to their own ui/components/modals.js
Decouple JS functions into smaller units for validation, API calls, UI updates.
3. templates/base_demo.html
Reason to Reuse:
Provides the common layout for user-facing (non-admin) pages.
Includes standard Bootstrap layout and icon styling.
Suggested Approach:
Rename to base_user.html in V2 for clarity.
Include versioning comment block at the top so user-facing templates can evolve separately from admin ones.
4. templates/login.html
Reason to Reuse:
Lightweight, functional, integrates cleanly with base_demo.html.
Changes:
Minor: If you shift to a new auth layer (e.g., OAuth2 for Epic), this may need to be a redirect screen, but the look/feel can remain.
5. templates/admin_dashboard.html, admin_ocr_dashboard.html, admin_logs.html
Reason to Reuse:
Well-separated from user interface; good use of a dedicated admin base.html.
Central to PHI filtering, OCR statistics, and logging workflows.
Suggested Refactor:
Extract dashboard widgets into reusable {% include %} components.
Create a JS module system per dashboard (e.g., admin_logs.js, ocr_monitor.js).
6. Error Pages (400.html, 401.html, etc.)
Reason to Reuse:
Consistent and well-formatted user experience.
Contextual messaging and helpful retry logic.
How to Modularize:
Create one base file error_base.html with block overrides.
Create logic in the backend to optionally pass custom messages / error codes.