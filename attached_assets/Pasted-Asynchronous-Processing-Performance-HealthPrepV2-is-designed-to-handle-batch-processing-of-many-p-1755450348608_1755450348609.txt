Asynchronous Processing & Performance: HealthPrepV2 is designed to handle batch processing of many patients (500+ prep sheets). When integrated with Epic, pulling data for hundreds of patients could be time-consuming and may hit rate limits. Code-wise, incorporate asynchronous jobs (as mentioned, possibly Celery or RQ) to fetch FHIR data and generate prep sheets in the background. For example, if an admin wants to prepare 100 patients’ sheets for tomorrow’s clinic, the app can queue jobs that do: for each patient, fetch FHIR data (maybe in parallel, but be mindful of Epic API limits), run the screening engine, and store the results (and optionally post DocumentReferences to Epic for each). Monitoring and retry logic should be in place in case some FHIR calls fail (e.g., network issues or token expiry). Caching could be used to reduce redundant calls – for instance, if generating multiple prep sheets in one session, and many patients have similar required data, but given the personalized nature, likely each patient needs separate calls. The app should also be prepared for the scenario where some data is not found via FHIR (e.g., if a required document is not present, the screening status will remain “Due”).
Multi-Tenancy and Configurability: The design calls for multi-tenant support (different clinics with isolated data). In the FHIR integration context, this means:
Each tenant (clinic) might connect their own Epic instance. In production, that would involve different base FHIR endpoints (each Epic customer has a unique FHIR endpoint URL) and different client credentials per site. For the sandbox, you’re using Epic’s generic sandbox endpoint, but long-term, architect the solution to allow storing multiple FHIR endpoint URLs and credentials. The Endpoints directory on open.epic provides production endpoint info for various Epic sites
open.epic.com
. Your app could allow an admin to enter their site’s FHIR base URL or use an endpoint discovery mechanism.
Ensure that data fetched for one tenant’s patients is not mixed with another. This involves scoping tokens and data storage by tenant. For example, if you store refresh tokens or patient data, include a tenant ID so that one clinic’s user cannot accidentally access another clinic’s patient by ID.
Possibly, provide a way to select a different FHIR endpoint in non-sandbox mode. Epic’s sandbox uses a single base URL for all test patients
open.epic.com
, but in production each organization will have its own. This might mean your configuration model needs to store the FHIR URL and client IDs for each org.
Logging and Audit: Add logging around the FHIR integration points. For instance, log when data is fetched from Epic and when a prep sheet is written back (with patient identifiers, but be careful to avoid logging full PHI content). These logs help with auditing as required by HIPAA – you should record which user triggered a fetch or write, and which patient’s data was involved. Epic’s system will also have an audit of the data access (since the token is tied to a user), but having your own audit trail in HealthPrepV2 for actions like “User X generated prep sheet for Patient Y using Epic data” is valuable for compliance and troubleshooting.